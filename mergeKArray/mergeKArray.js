// Implement the missing code, denoted by ellipses. You may not modify the pre-existing code.
// Given K sorted arrays, return their sorted concatenation.

// Example

// For arrays = [[1, 3, 5], [2, 3], [2, 3, 5, 8]], the output should be
// mergeKArrays(arrays) = [1, 2, 2, 3, 3, 3, 5, 5, 8].

// Input/Output

// [execution time limit] 4 seconds (js)

// [input] array.array.integer arrays

// An array of K one-dimensional sorted arrays.

// Guaranteed constraints:
// 2 ≤ arrays.length ≤ 100,
// 0 ≤ arrays[i].length ≤ 10,
// -100 ≤ arrays[i][j] ≤ 100.

// [output] array.integer
const test = require('../test.js');

function mergeKArrays(arrays) {
  var firstUnused = [];
  var result = [];
  var n = 0;
  for (var i = 0; i < arrays.length; i++) {
    firstUnused.push(0);
    n += arrays[i].length;
  }
  for (var i = 0; i < n; i++) {
    var minIndex = -1;
    var minValue = 0;
    for (var j = 0; j < arrays.length; j++) {
      if (firstUnused[j] < arrays[j].length) {
        if ((minIndex === -1) || arrays[j][firstUnused[j]] <= minValue) {
          minIndex = j;
          minValue = arrays[j][firstUnused[j]];
        }
      }
    }
    result.push(minValue);
    firstUnused[minIndex]++;
  }
  return result;
}

var testX = [[], 
 [79,83,86,92,93,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100]];
var outputX = [79, 83, 86, 92, 93, 99, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100];


var testY = [[82,93,97,97,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100], 
 [49,83,94,94,94,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100], 
 [-6,79,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100]];
var outputY = [-6, 49, 79, 82, 83, 93, 94, 94, 94, 97, 97, 99, 99, 99, 99, 99, 99, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100];

const tests = [
  [[[1,3,5], [2,3], [2,3,5,8]], [1, 2, 2, 3, 3, 3, 5, 5, 8]], 
  [[[1], [], [1,1], []], [1, 1, 1]],
  [[[-100], [100,100]], [-100, 100, 100]],
  [[[2,4], [3,5]], [2, 3, 4, 5]],
  [[[67,83], [1,1,5,7,9], [-5,-2,0,1,5], [0,0,1,5,6], [1,1,5,7,9], [23,34]], [-5, -2, 0, 0, 0, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 6, 7, 7, 9, 9, 23, 34, 67, 83]],
  [testX, outputX],
  [testY, outputY]
]

test('MergeKArray', mergeKArrays, tests);